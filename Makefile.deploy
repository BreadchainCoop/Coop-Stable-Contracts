# Coopstable Protocol Deployment Makefile
# Usage: make -f Makefile.deploy [target]
#
# This Makefile handles deployment and configuration of the Coopstable protocol.
# Use the main Makefile for building contracts.

# Network configuration
NETWORK ?= testnet
WASM_DIR = ./target/wasm32v1-none/release

# Account keys (set these as environment variables or override them)
OWNER_KEY ?= owner
ADMIN_KEY ?= admin
TREASURY_KEY ?= treasury

# Get public keys from stellar keys
OWNER := $(shell stellar keys public-key $(OWNER_KEY))
ADMIN := $(shell stellar keys public-key $(ADMIN_KEY))
TREASURY := $(shell stellar keys public-key $(TREASURY_KEY))

# Contract IDs from testnet.json (v2)
CUSD_ID = CDHHR356G725HNLAAQ74WBGVT6Y6ZFZLM2TIHLDCOZTJ2SVZ7P3EANYT
BLEND_POOL_ID = CAMKTT6LIXNOKZJVFI64EBEQE25UYAQZBTHDIQ4LEDJLTCM6YVME6IIY
BLEND_TOKEN_ID = CB22KRA3YZVCNCQI64JQ5WE7UY2VAV7WFLK6A2JN3HEX56T2EDAFO7QF
USDC_ID = CAQCFVLOBK5GIULPNZRGATJJMIZL5BSP7X5YJVMGCPTUEPFM4AVSRCJU

# Contract addresses (will be set after deployment or loaded from file)
-include deployed_addresses.mk

# Default values
TREASURY_SHARE_BPS ?= 1000
DISTRIBUTION_PERIOD ?= 60

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

# Help target
.PHONY: help
help:
	@echo "$(GREEN)Coopstable Protocol Deployment Makefile$(NC)"
	@echo ""
	@echo "$(YELLOW)Prerequisites:$(NC)"
	@echo "  - Run 'make build' in the main directory first"
	@echo "  - Stellar accounts already created (owner, admin, treasury)"
	@echo "  - CUSD already deployed"
	@echo "  - Current CUSD manager set as admin"
	@echo ""
	@echo "$(YELLOW)Quick start:$(NC)"
	@echo "  $(GREEN)make -f Makefile.deploy quick-deploy$(NC) - Build and deploy everything"
	@echo ""
	@echo "$(YELLOW)Main targets:$(NC)"
	@echo "  $(GREEN)deploy-all$(NC)              - Deploy entire protocol"
	@echo "  $(GREEN)deploy-core$(NC)             - Deploy core contracts only"
	@echo "  $(GREEN)deploy-adapters$(NC)         - Deploy adapter contracts"
	@echo "  $(GREEN)configure-all$(NC)           - Configure entire protocol"
	@echo "  $(GREEN)test-deposit$(NC)            - Test deposit operation"
	@echo ""
	@echo "$(YELLOW)Individual deployment targets:$(NC)"
	@echo "  $(GREEN)deploy-cusd-manager$(NC)     - Deploy CUSD Manager"
	@echo "  $(GREEN)deploy-registry$(NC)         - Deploy Yield Adapter Registry"
	@echo "  $(GREEN)deploy-distributor$(NC)      - Deploy Yield Distributor"
	@echo "  $(GREEN)deploy-controller$(NC)       - Deploy Lending Yield Controller"
	@echo "  $(GREEN)deploy-blend-adapter$(NC)    - Deploy Blend Capital Adapter"
	@echo ""
	@echo "$(YELLOW)Individual configuration targets:$(NC)"
	@echo "  $(GREEN)configure-cusd$(NC)          - Configure CUSD Manager"
	@echo "  $(GREEN)configure-distributor$(NC)   - Configure Yield Distributor"
	@echo "  $(GREEN)configure-registry$(NC)      - Configure Adapter Registry"
	@echo "  $(GREEN)register-blend-adapter$(NC)  - Register Blend adapter"
	@echo ""
	@echo "$(YELLOW)Utility targets:$(NC)"
	@echo "  $(GREEN)show-addresses$(NC)          - Show deployed contract addresses"
	@echo "  $(GREEN)save-addresses$(NC)          - Save addresses to file"
	@echo "  $(GREEN)load-existing$(NC)           - Load existing v2 addresses from testnet.json"
	@echo "  $(GREEN)verify-deployment$(NC)       - Verify deployment status"

# Build contracts using main Makefile
.PHONY: build-contracts
build-contracts:
	@echo "$(YELLOW)Building contracts using main Makefile...$(NC)"
	@$(MAKE) build
	@echo "$(GREEN)Build complete!$(NC)"

# Deploy all contracts and configure
.PHONY: deploy-all
deploy-all: check-build deploy-core deploy-adapters configure-all
	@echo "$(GREEN)Full protocol deployment complete!$(NC)"
	@$(MAKE) -f Makefile.deploy show-addresses
	@$(MAKE) -f Makefile.deploy save-addresses

# Check if contracts are built
.PHONY: check-build
check-build:
	@if [ ! -f "$(WASM_DIR)/cusd_manager.wasm" ]; then \
		echo "$(RED)Error: Contracts not built. Run 'make build' first.$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)âœ“ Contracts are built$(NC)"

# Deploy core contracts
.PHONY: deploy-core
deploy-core: deploy-cusd-manager deploy-registry deploy-distributor deploy-controller
	@echo "$(GREEN)Core contracts deployed!$(NC)"

# Deploy adapter contracts
.PHONY: deploy-adapters
deploy-adapters: deploy-blend-adapter
	@echo "$(GREEN)Adapter contracts deployed!$(NC)"

# Individual contract deployments
.PHONY: deploy-cusd-manager
deploy-cusd-manager: check-build
	@echo "$(YELLOW)Deploying CUSD Manager...$(NC)"
	$(eval CUSD_MANAGER_ID := $(shell stellar contract deploy \
		--wasm $(WASM_DIR)/cusd_manager.wasm \
		--source $(OWNER_KEY) \
		--network $(NETWORK) \
		-- \
		--cusd_id $(CUSD_ID) \
		--owner $(OWNER) \
		--admin $(ADMIN)))
	@echo "$(GREEN)CUSD Manager deployed: $(CUSD_MANAGER_ID)$(NC)"

.PHONY: deploy-registry
deploy-registry: check-build
	@echo "$(YELLOW)Deploying Yield Adapter Registry...$(NC)"
	$(eval YIELD_ADAPTER_REGISTRY_ID := $(shell stellar contract deploy \
		--wasm $(WASM_DIR)/yield_adapter_registry.wasm \
		--source $(OWNER_KEY) \
		--network $(NETWORK) \
		-- \
		--admin $(ADMIN)))
	@echo "$(GREEN)Yield Adapter Registry deployed: $(YIELD_ADAPTER_REGISTRY_ID)$(NC)"

.PHONY: deploy-distributor
deploy-distributor: check-build
	@echo "$(YELLOW)Deploying Yield Distributor...$(NC)"
	# Use a placeholder address initially, will be updated later
	$(eval YIELD_DISTRIBUTOR_ID := $(shell stellar contract deploy \
		--wasm $(WASM_DIR)/yield_distributor.wasm \
		--source $(OWNER_KEY) \
		--network $(NETWORK) \
		-- \
		--treasury $(TREASURY) \
		--treasury_share_bps $(TREASURY_SHARE_BPS) \
		--yield_controller GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHF \
		--distribution_period $(DISTRIBUTION_PERIOD) \
		--owner $(OWNER) \
		--admin $(ADMIN)))
	@echo "$(GREEN)Yield Distributor deployed: $(YIELD_DISTRIBUTOR_ID)$(NC)"

.PHONY: deploy-controller
deploy-controller: check-build
	@echo "$(YELLOW)Deploying Lending Yield Controller...$(NC)"
	@if [ -z "$(YIELD_DISTRIBUTOR_ID)" ] || [ -z "$(YIELD_ADAPTER_REGISTRY_ID)" ] || [ -z "$(CUSD_MANAGER_ID)" ]; then \
		echo "$(RED)Error: Required contract IDs not set. Deploy core contracts first or load addresses.$(NC)"; \
		exit 1; \
	fi
	$(eval LENDING_YIELD_CONTROLLER_ID := $(shell stellar contract deploy \
		--wasm $(WASM_DIR)/lending_yield_controller.wasm \
		--source $(OWNER_KEY) \
		--network $(NETWORK) \
		-- \
		--yield_distributor $(YIELD_DISTRIBUTOR_ID) \
		--adapter_registry $(YIELD_ADAPTER_REGISTRY_ID) \
		--cusd_manager $(CUSD_MANAGER_ID) \
		--admin $(ADMIN) \
		--owner $(OWNER)))
	@echo "$(GREEN)Lending Yield Controller deployed: $(LENDING_YIELD_CONTROLLER_ID)$(NC)"

.PHONY: deploy-blend-adapter
deploy-blend-adapter: check-build
	@echo "$(YELLOW)Deploying Blend Capital Adapter...$(NC)"
	@if [ -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then \
		echo "$(RED)Error: Lending Yield Controller ID not set. Deploy controller first or load addresses.$(NC)"; \
		exit 1; \
	fi
	$(eval BLEND_CAPITAL_ADAPTER_ID := $(shell stellar contract deploy \
		--wasm $(WASM_DIR)/blend_capital_adapter.wasm \
		--source $(OWNER_KEY) \
		--network $(NETWORK) \
		-- \
		--yield_controller $(LENDING_YIELD_CONTROLLER_ID) \
		--blend_pool_id $(BLEND_POOL_ID) \
		--blend_token_id $(BLEND_TOKEN_ID)))
	@echo "$(GREEN)Blend Capital Adapter deployed: $(BLEND_CAPITAL_ADAPTER_ID)$(NC)"

# Configure all contracts
.PHONY: configure-all
configure-all: configure-cusd configure-distributor register-blend-adapter
	@echo "$(GREEN)Protocol configuration complete!$(NC)"

# Configure CUSD Manager
.PHONY: configure-cusd
configure-cusd:
	@echo "$(YELLOW)Configuring CUSD Manager...$(NC)"
	@if [ -z "$(CUSD_MANAGER_ID)" ] || [ -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then \
		echo "$(RED)Error: Required contract IDs not set. Deploy contracts first or load addresses.$(NC)"; \
		exit 1; \
	fi
	# Set CUSD Manager as admin of CUSD token
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(CUSD_ID) \
		-- \
		set_admin \
		--new_admin $(CUSD_MANAGER_ID)
	# Set Lending Controller as yield controller in CUSD Manager
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(CUSD_MANAGER_ID) \
		-- \
		set_yield_controller \
		--caller $(ADMIN) \
		--new_controller $(LENDING_YIELD_CONTROLLER_ID)
	@echo "$(GREEN)CUSD Manager configured!$(NC)"

# Configure Yield Distributor
.PHONY: configure-distributor
configure-distributor:
	@echo "$(YELLOW)Configuring Yield Distributor...$(NC)"
	@if [ -z "$(YIELD_DISTRIBUTOR_ID)" ] || [ -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then \
		echo "$(RED)Error: Required contract IDs not set. Deploy contracts first or load addresses.$(NC)"; \
		exit 1; \
	fi
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(YIELD_DISTRIBUTOR_ID) \
		-- \
		set_yield_controller \
		--caller $(ADMIN) \
		--yield_controller $(LENDING_YIELD_CONTROLLER_ID)
	@echo "$(GREEN)Yield Distributor configured!$(NC)"

# Register Blend adapter
.PHONY: register-blend-adapter
register-blend-adapter:
	@echo "$(YELLOW)Registering Blend Capital Adapter...$(NC)"
	@if [ -z "$(YIELD_ADAPTER_REGISTRY_ID)" ] || [ -z "$(BLEND_CAPITAL_ADAPTER_ID)" ]; then \
		echo "$(RED)Error: Required contract IDs not set. Deploy contracts first or load addresses.$(NC)"; \
		exit 1; \
	fi
	# Register adapter
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(YIELD_ADAPTER_REGISTRY_ID) \
		-- \
		register_adapter \
		--caller $(ADMIN) \
		--yield_type "LEND" \
		--protocol "BC_LA" \
		--adapter_address $(BLEND_CAPITAL_ADAPTER_ID)
	# Add USDC support
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(YIELD_ADAPTER_REGISTRY_ID) \
		-- \
		add_support_for_asset \
		--caller $(ADMIN) \
		--yield_type "LEND" \
		--protocol "BC_LA" \
		--asset_address $(USDC_ID)
	@echo "$(GREEN)Blend adapter registered with USDC support!$(NC)"

# Test deposit operation
.PHONY: test-deposit
test-deposit:
	@echo "$(YELLOW)Testing deposit operation...$(NC)"
	@if [ -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then \
		echo "$(RED)Error: Lending Yield Controller ID not set. Deploy contracts first or load addresses.$(NC)"; \
		exit 1; \
	fi
	# Approve USDC
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(USDC_ID) \
		-- \
		approve \
		--from $(ADMIN) \
		--spender $(LENDING_YIELD_CONTROLLER_ID) \
		--amount 10000000 \
		--expiration_ledger 9999999
	# Deposit collateral
	stellar contract invoke \
		--source $(ADMIN_KEY) \
		--network $(NETWORK) \
		--id $(LENDING_YIELD_CONTROLLER_ID) \
		-- \
		deposit_collateral \
		--protocol "BC_LA" \
		--user $(ADMIN) \
		--asset $(USDC_ID) \
		--amount 10000000
	@echo "$(GREEN)Test deposit complete!$(NC)"

# Show deployed addresses
.PHONY: show-addresses
show-addresses:
	@echo "$(YELLOW)Contract Addresses:$(NC)"
	@echo "$(GREEN)External Contracts:$(NC)"
	@echo "  CUSD_ID                      = $(CUSD_ID)"
	@echo "  USDC_ID                      = $(USDC_ID)"
	@echo "  BLEND_POOL_ID                = $(BLEND_POOL_ID)"
	@echo "  BLEND_TOKEN_ID               = $(BLEND_TOKEN_ID)"
	@echo ""
	@echo "$(GREEN)Deployed Contracts:$(NC)"
	@echo "  CUSD_MANAGER_ID              = $(if $(CUSD_MANAGER_ID),$(CUSD_MANAGER_ID),$(RED)Not deployed$(NC))"
	@echo "  YIELD_ADAPTER_REGISTRY_ID    = $(if $(YIELD_ADAPTER_REGISTRY_ID),$(YIELD_ADAPTER_REGISTRY_ID),$(RED)Not deployed$(NC))"
	@echo "  YIELD_DISTRIBUTOR_ID         = $(if $(YIELD_DISTRIBUTOR_ID),$(YIELD_DISTRIBUTOR_ID),$(RED)Not deployed$(NC))"
	@echo "  LENDING_YIELD_CONTROLLER_ID  = $(if $(LENDING_YIELD_CONTROLLER_ID),$(LENDING_YIELD_CONTROLLER_ID),$(RED)Not deployed$(NC))"
	@echo "  BLEND_CAPITAL_ADAPTER_ID     = $(if $(BLEND_CAPITAL_ADAPTER_ID),$(BLEND_CAPITAL_ADAPTER_ID),$(RED)Not deployed$(NC))"

# Save addresses to file
.PHONY: save-addresses
save-addresses:
	@echo "$(YELLOW)Saving addresses to deployed_addresses.mk...$(NC)"
	@echo "# Deployed contract addresses - $(shell date)" > deployed_addresses.mk
	@echo "# Source this file to load addresses: include deployed_addresses.mk" >> deployed_addresses.mk
	@echo "" >> deployed_addresses.mk
	@if [ ! -z "$(CUSD_MANAGER_ID)" ]; then echo "CUSD_MANAGER_ID = $(CUSD_MANAGER_ID)" >> deployed_addresses.mk; fi
	@if [ ! -z "$(YIELD_ADAPTER_REGISTRY_ID)" ]; then echo "YIELD_ADAPTER_REGISTRY_ID = $(YIELD_ADAPTER_REGISTRY_ID)" >> deployed_addresses.mk; fi
	@if [ ! -z "$(YIELD_DISTRIBUTOR_ID)" ]; then echo "YIELD_DISTRIBUTOR_ID = $(YIELD_DISTRIBUTOR_ID)" >> deployed_addresses.mk; fi
	@if [ ! -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then echo "LENDING_YIELD_CONTROLLER_ID = $(LENDING_YIELD_CONTROLLER_ID)" >> deployed_addresses.mk; fi
	@if [ ! -z "$(BLEND_CAPITAL_ADAPTER_ID)" ]; then echo "BLEND_CAPITAL_ADAPTER_ID = $(BLEND_CAPITAL_ADAPTER_ID)" >> deployed_addresses.mk; fi
	@echo "" >> deployed_addresses.mk
	@echo "# Also save as shell script for manual use" >> deployed_addresses.mk
	@echo "$(GREEN)Addresses saved to deployed_addresses.mk$(NC)"
	@# Also create a shell script version
	@echo "#!/bin/bash" > deployed_addresses.sh
	@echo "# Deployed contract addresses - $(shell date)" >> deployed_addresses.sh
	@if [ ! -z "$(CUSD_MANAGER_ID)" ]; then echo "export CUSD_MANAGER_ID=$(CUSD_MANAGER_ID)" >> deployed_addresses.sh; fi
	@if [ ! -z "$(YIELD_ADAPTER_REGISTRY_ID)" ]; then echo "export YIELD_ADAPTER_REGISTRY_ID=$(YIELD_ADAPTER_REGISTRY_ID)" >> deployed_addresses.sh; fi
	@if [ ! -z "$(YIELD_DISTRIBUTOR_ID)" ]; then echo "export YIELD_DISTRIBUTOR_ID=$(YIELD_DISTRIBUTOR_ID)" >> deployed_addresses.sh; fi
	@if [ ! -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then echo "export LENDING_YIELD_CONTROLLER_ID=$(LENDING_YIELD_CONTROLLER_ID)" >> deployed_addresses.sh; fi
	@if [ ! -z "$(BLEND_CAPITAL_ADAPTER_ID)" ]; then echo "export BLEND_CAPITAL_ADAPTER_ID=$(BLEND_CAPITAL_ADAPTER_ID)" >> deployed_addresses.sh; fi
	@chmod +x deployed_addresses.sh
	@echo "$(GREEN)Also saved as deployed_addresses.sh (run: source deployed_addresses.sh)$(NC)"

# Load existing v2 addresses from testnet.json
.PHONY: load-existing
load-existing:
	@echo "$(YELLOW)Loading existing v2 addresses from testnet.json...$(NC)"
	@echo "# Loaded from testnet.json v2 - $(shell date)" > deployed_addresses.mk
	@echo "CUSD_MANAGER_ID = CBPQVQ6KFEQMB4W25AJT6MWPINFRJO4CYCJEEA6H5M7UUT5TLXISUCAY" >> deployed_addresses.mk
	@echo "YIELD_ADAPTER_REGISTRY_ID = CCMBIA6M2FLCKE4USF2TAU5TAED23TPPPW7JBATGBMF5JI4L5ML4EKHL" >> deployed_addresses.mk
	@echo "YIELD_DISTRIBUTOR_ID = CBHJBD7PSM524MBLIRBKMVNBDK4EFPS7T4XIPA5OCC4E2BRPM4ZXYUVG" >> deployed_addresses.mk
	@echo "LENDING_YIELD_CONTROLLER_ID = CDTZYUNULCB426ONSR3XRK75RHKUBJDQWMRRPC4POPJH3PWD46KBDF2M" >> deployed_addresses.mk
	@echo "BLEND_CAPITAL_ADAPTER_ID = CC2JU4VDRYDEOMW62PV4GM3EXD4ODVIUHD6LSO6DUD5XEH5TQOUKSQCA" >> deployed_addresses.mk
	@echo "$(GREEN)Existing addresses loaded! You can now run configuration commands.$(NC)"

# Quick deployment with build
.PHONY: quick-deploy
quick-deploy:
	@echo "$(YELLOW)Starting quick deployment with build...$(NC)"
	@$(MAKE) build
	@$(MAKE) -f Makefile.deploy deploy-all
	@echo "$(GREEN)Quick deployment complete!$(NC)"

# Verify deployment
.PHONY: verify-deployment
verify-deployment:
	@echo "$(YELLOW)Verifying deployment...$(NC)"
	@echo ""
	@echo "$(YELLOW)Build Status:$(NC)"
	@if [ -f "$(WASM_DIR)/cusd_manager.wasm" ]; then \
		echo "$(GREEN)âœ“ Contracts built$(NC)"; \
	else \
		echo "$(RED)âœ— Contracts not built - run 'make build'$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Deployment Status:$(NC)"
	@if [ ! -z "$(CUSD_MANAGER_ID)" ]; then \
		echo "$(GREEN)âœ“ CUSD Manager: $(CUSD_MANAGER_ID)$(NC)"; \
	else \
		echo "$(RED)âœ— CUSD Manager not deployed$(NC)"; \
	fi
	@if [ ! -z "$(YIELD_ADAPTER_REGISTRY_ID)" ]; then \
		echo "$(GREEN)âœ“ Yield Adapter Registry: $(YIELD_ADAPTER_REGISTRY_ID)$(NC)"; \
	else \
		echo "$(RED)âœ— Yield Adapter Registry not deployed$(NC)"; \
	fi
	@if [ ! -z "$(YIELD_DISTRIBUTOR_ID)" ]; then \
		echo "$(GREEN)âœ“ Yield Distributor: $(YIELD_DISTRIBUTOR_ID)$(NC)"; \
	else \
		echo "$(RED)âœ— Yield Distributor not deployed$(NC)"; \
	fi
	@if [ ! -z "$(LENDING_YIELD_CONTROLLER_ID)" ]; then \
		echo "$(GREEN)âœ“ Lending Yield Controller: $(LENDING_YIELD_CONTROLLER_ID)$(NC)"; \
	else \
		echo "$(RED)âœ— Lending Yield Controller not deployed$(NC)"; \
	fi
	@if [ ! -z "$(BLEND_CAPITAL_ADAPTER_ID)" ]; then \
		echo "$(GREEN)âœ“ Blend Capital Adapter: $(BLEND_CAPITAL_ADAPTER_ID)$(NC)"; \
	else \
		echo "$(RED)âœ— Blend Capital Adapter not deployed$(NC)"; \
	fi

# Clean deployment files (not build artifacts)
.PHONY: clean-deploy
clean-deploy:
	@echo "$(YELLOW)Cleaning deployment files...$(NC)"
	@rm -f deployed_addresses.mk deployed_addresses.sh
	@echo "$(GREEN)Deployment files cleaned!$(NC)"

# Redeploy a specific contract
.PHONY: redeploy-cusd-manager
redeploy-cusd-manager: deploy-cusd-manager configure-cusd save-addresses
	@echo "$(GREEN)CUSD Manager redeployed and configured!$(NC)"

.PHONY: redeploy-registry
redeploy-registry: deploy-registry register-blend-adapter save-addresses
	@echo "$(GREEN)Registry redeployed and configured!$(NC)"

.PHONY: redeploy-distributor
redeploy-distributor: deploy-distributor configure-distributor save-addresses
	@echo "$(GREEN)Distributor redeployed and configured!$(NC)"

.PHONY: redeploy-controller
redeploy-controller: deploy-controller configure-cusd configure-distributor save-addresses
	@echo "$(GREEN)Controller redeployed and configured!$(NC)"

.PHONY: redeploy-blend-adapter
redeploy-blend-adapter: deploy-blend-adapter register-blend-adapter save-addresses
	@echo "$(GREEN)Blend adapter redeployed and registered!$(NC)"

.DEFAULT_GOAL := help